drop schema if exists HR_PIPELINE_DB;
CREATE SCHEMA HR_PIPELINE_DB;
USE HR_PIPELINE_DB;

-- ===================
-- USERS TABLE
-- ===================
CREATE TABLE users (
    user_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    full_name VARCHAR(150),
    role ENUM('RECRUITER', 'MANAGER', 'ADMIN', 'EXECUTIVE', 'CANDIDATE') NOT NULL,
    status ENUM('ACTIVE', 'INACTIVE') DEFAULT 'ACTIVE',
    mfa_enabled BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===================
-- JOB POSTINGS TABLE
-- ===================
CREATE TABLE job_postings (
    job_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    requirements TEXT,
    responsibilities TEXT,
    location VARCHAR(100),
    department VARCHAR(100),
    employment_type ENUM('FULL_TIME', 'PART_TIME', 'CONTRACT', 'INTERN') NOT NULL,
    status ENUM('ACTIVE', 'INACTIVE') DEFAULT 'ACTIVE',
    created_by BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

-- ===================
-- CANDIDATES TABLE
-- ===================
CREATE TABLE candidates (
    candidate_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT UNIQUE,
   /* resume_url TEXT,
    cover_letter_url TEXT,
    */
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- ===================
-- APPLICATIONS TABLE
-- ===================
CREATE TABLE applications (
    application_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    candidate_id BIGINT NOT NULL,
    job_id BIGINT NOT NULL,
    resume_url TEXT,
    cover_letter_url TEXT,
    status ENUM('APPLIED', 'REVIEWED', 'INTERVIEW_SCHEDULED', 'INTERVIEWED', 'OFFERED', 'REJECTED', 'HIRED', 'WITHDRAWN') NOT NULL DEFAULT 'APPLIED',
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(150) UNIQUE,
    date_of_birth DATE,
    phone_number VARCHAR(20),
    address VARCHAR(255),
    college_name VARCHAR(255),
    tenth_percentage DECIMAL(5, 2),
    twelfth_percentage DECIMAL(5, 2),
    graduation_cgpa DECIMAL(4, 2),
    post_graduation_cgpa DECIMAL(4, 2),
    passed_out_year INT,
    backlog_history TEXT,
    skills TEXT,
    projects TEXT,
    course VARCHAR(255),
    specialization VARCHAR(255),
    FOREIGN KEY (candidate_id) REFERENCES candidates(candidate_id),
    FOREIGN KEY (job_id) REFERENCES job_postings(job_id)
);


-- ===================
-- INTERVIEWS TABLE
-- ===================
CREATE TABLE interviews (
    interview_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    application_id BIGINT NOT NULL UNIQUE,
    interview_datetime DATETIME NOT NULL,
    interview_type ENUM('PHONE', 'VIDEO', 'IN_PERSON') NOT NULL,
    location_or_link TEXT,
    status ENUM('SCHEDULED', 'COMPLETED', 'CANCELLED') DEFAULT 'SCHEDULED',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (application_id) REFERENCES applications(application_id)
);


-- ===================
-- INTERVIEWERS TABLE
-- ===================
CREATE TABLE interviewers (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    interview_id BIGINT NOT NULL,
    interviewer_id BIGINT NOT NULL,
    FOREIGN KEY (interview_id) REFERENCES interviews(interview_id),
    FOREIGN KEY (interviewer_id) REFERENCES users(user_id),
    UNIQUE(interview_id, interviewer_id)
);


-- ===================
-- INTERVIEW FEEDBACK TABLE
-- ===================
CREATE TABLE interview_feedback (
    feedback_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    interview_id BIGINT NOT NULL,
    reviewer_id BIGINT NOT NULL,
    rating TINYINT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    comments TEXT,
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(interview_id, reviewer_id),
    FOREIGN KEY (interview_id) REFERENCES interviews(interview_id),
    FOREIGN KEY (reviewer_id) REFERENCES users(user_id)
);

-- ===================
-- CANDIDATE NOTES TABLE
-- ===================
CREATE TABLE candidate_notes (
    note_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    candidate_id BIGINT NOT NULL,
    added_by BIGINT,
    note TEXT,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (candidate_id) REFERENCES candidates(candidate_id),
    FOREIGN KEY (added_by) REFERENCES users(user_id)
);

-- ===================
-- EMAIL TEMPLATES TABLE
-- ===================
CREATE TABLE email_templates (
    template_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    type ENUM('ACKNOWLEDGEMENT', 'STATUS_UPDATE', 'INTERVIEW_INVITE', 'FEEDBACK', 'GENERIC') NOT NULL,
    subject VARCHAR(255),
    body TEXT,
    created_by BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(user_id)
);

-- ===================
-- ONBOARDING DOCUMENTS TABLE
-- ===================
CREATE TABLE onboarding_documents (
    document_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    candidate_id BIGINT NOT NULL,
    document_name VARCHAR(255),
    document_url TEXT,
    signed BOOLEAN DEFAULT FALSE,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (candidate_id) REFERENCES candidates(candidate_id)
);

-- ===================
-- AUDIT LOG TABLE
-- ===================
CREATE TABLE audit_log (
    log_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT,
    action_type VARCHAR(100),
    description TEXT,
    action_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- ===================
-- TALENT POOL TABLE
-- ===================
CREATE TABLE talent_pool (
    pool_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    candidate_id BIGINT NOT NULL,
    tags TEXT,
    source VARCHAR(100),
    reengagement_status ENUM('NOT_CONTACTED', 'CONTACTED', 'INTERESTED', 'NOT_INTERESTED') DEFAULT 'NOT_CONTACTED',
    last_contacted_at TIMESTAMP NULL,
    FOREIGN KEY (candidate_id) REFERENCES candidates(candidate_id)
);

-- ===================
-- APPLICATION STATUS HISTORY TABLE
-- ===================
CREATE TABLE application_status_history (
    history_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    application_id BIGINT NOT NULL,
    previous_status VARCHAR(50),
    new_status VARCHAR(50),
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    changed_by BIGINT,
    FOREIGN KEY (application_id) REFERENCES applications(application_id),
    FOREIGN KEY (changed_by) REFERENCES users(user_id)
);
package com.infy.hrpipelinemanager.entity;

import java.sql.Timestamp;

import org.hibernate.annotations.CreationTimestamp;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.Data;
@Data
@Entity
@Table(name = "candidates")
public class Candidate {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long candidateId;

    @OneToOne
    @JoinColumn(name = "user_id", unique = true)
    private User user;

//    @Column(columnDefinition = "TEXT")
//    private String resumeUrl;
//
//    @Column(columnDefinition = "TEXT")
//    private String coverLetterUrl;

    @CreationTimestamp
    private Timestamp createdAt;

    // Constructors, getters, setters

	
}
@Service
public class CandidateServiceImpl implements CandidateService {

    @Autowired
    private CandidateRepository candidateRepository;

    @Autowired
    private UserRepository userRepository;

    @Override
    public Optional<Candidate> getCandidateByUserId(Long userId) {
        return candidateRepository.findByUserUserId(userId);
    }

    @Override
    public Candidate createCandidateForUser(Long userId) {
        User user = userRepository.findById(userId).orElseThrow(() ->
                new IllegalArgumentException("User not found: " + userId));

        if (!Role.CANDIDATE.name().equalsIgnoreCase(user.getRole().name())) {
            throw new IllegalArgumentException("User role is not CANDIDATE");
        }

        if (candidateRepository.existsByUserUserId(userId)) {
            throw new IllegalArgumentException("Candidate already exists for user");
        }

        Candidate candidate = new Candidate();
        candidate.setUser(user);
        return candidateRepository.save(candidate);
    }

    @Override
    public boolean candidateExistsForUser(Long userId) {
        return candidateRepository.existsByUserUserId(userId);
    }
}

// === CandidateRepository ===
@Repository
public interface CandidateRepository extends JpaRepository<Candidate, Long> {
    Optional<Candidate> findByUserUserId(Long userId);
    boolean existsByUserUserId(Long userId);
}
@RestController
@RequestMapping("/api/candidates")
public class CandidateController {

    @Autowired
    private CandidateService candidateService;

    @PostMapping("/create/{userId}")
    public ResponseEntity<Candidate> createCandidate(@PathVariable Long userId) {
        Candidate candidate = candidateService.createCandidateForUser(userId);
        return new ResponseEntity<>(candidate, HttpStatus.CREATED);
    }

    @GetMapping("/by-user/{userId}")
    public ResponseEntity<Candidate> getByUser(@PathVariable Long userId) {
        return candidateService.getCandidateByUserId(userId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
}

// === ApplicationService (simplified) ===
@Service
public class ApplicationService {

    @Autowired
    private ApplicationRepository applicationRepository;

    @Autowired
    private CandidateService candidateService;

    public Application createApplication(Long userId, Application applicationData) {
        Candidate candidate = candidateService.getCandidateByUserId(userId)
                .orElseThrow(() -> new IllegalArgumentException("Candidate not found for user"));

        applicationData.setCandidate(candidate);
        return applicationRepository.save(applicationData);
    }
}

// === ApplicationRepository ===
@Repository
public interface ApplicationRepository extends JpaRepository<Application, Long> {
    List<Application> findByCandidateCandidateId(Long candidateId);
}
Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
    boolean existsByUsername(String username);
}

// === UserService ===
public interface UserService {
    Optional<User> getUserById(Long userId);
    Optional<User> getUserByEmail(String email);
    boolean existsByUsername(String username);
    User saveUser(User user);
}

// === UserServiceImpl ===
@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Override
    public Optional<User> getUserById(Long userId) {
        return userRepository.findById(userId);
    }

    @Override
    public Optional<User> getUserByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    @Override
    public boolean existsByUsername(String username) {
        return userRepository.existsByUsername(username);
    }

    @Override
    public User saveUser(User user) {
        return userRepository.save(user);
    }
}
package com.infy.hrpipelinemanager.service;

import java.io.UnsupportedEncodingException;
import java.sql.Timestamp;
import java.time.Instant;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.infy.hrpipelinemanager.dto.ApplicationDTO;
import com.infy.hrpipelinemanager.entity.Application;
import com.infy.hrpipelinemanager.entity.ApplicationStatus;
import com.infy.hrpipelinemanager.entity.Candidate;
import com.infy.hrpipelinemanager.entity.EmailTemplate;
import com.infy.hrpipelinemanager.entity.EmailType;
import com.infy.hrpipelinemanager.entity.JobPosting;
import com.infy.hrpipelinemanager.exception.hrpipelinemanagerException;
import com.infy.hrpipelinemanager.repository.CandidateRepository;
//import com.infy.hrpipelinemanager.repository.EmailTemplateRepository;
import com.infy.hrpipelinemanager.repository.JobApplicationRepository;
import com.infy.hrpipelinemanager.repository.JobPostingRepository;
import com.infy.hrpipelinemanager.utility.EmailUtil;

import jakarta.mail.MessagingException;

@Service()
@Transactional
public class JobApplicationServiceImpl implements JobApplicationService {

    @Autowired
    private JobApplicationRepository applicationRepository;

    @Autowired
    private CandidateRepository candidateRepository;

    @Autowired
    private JobPostingRepository jobPostingRepository;

//    @Autowired
//    private ModelMapper modelMapper;
    @Autowired
    private EmailTemplateService emailTemplateService;

    @Autowired
    private EmailUtil emailUtil;
//    ModelMapper modelMapper=new ModelMapper();
    /**
     * Submit a new job application.
     *
     * @param dto the job application data
     * @return application ID
     */
    @Override
    public Long submitApplication(ApplicationDTO dto) throws hrpipelinemanagerException {
    	ModelMapper modelMapper=new ModelMapper();

        // Find Candidate
        Candidate candidate = candidateRepository.findById(dto.getCandidateId())
                .orElseThrow(() -> new hrpipelinemanagerException("ApplicationService.CANDIDATE_NOT_FOUND"));

        // Find Job Posting
        JobPosting jobPosting = jobPostingRepository.findById(dto.getJobId())
                .orElseThrow(() -> new hrpipelinemanagerException("ApplicationService.JOB_POSTING_NOT_FOUND"));

        // Map DTO to Entity
        Application application = modelMapper.map(dto, Application.class);
        application.setCandidate(candidate);
        application.setJob(jobPosting);
        application.setStatus(ApplicationStatus.APPLIED);
        application.setAppliedAt(Timestamp.from(Instant.now()));
        application.setLastUpdated(Timestamp.from(Instant.now()));

        // Save to DB
        Application saved = applicationRepository.save(application);
        return saved.getApplicationId();
    }

    /**
     * Get application by ID.
     *
     * @param applicationId ID to fetch
     * @return application DTO
     */
    @Override
    public ApplicationDTO getApplicationById(Long applicationId) throws hrpipelinemanagerException {
    	ModelMapper modelMapper=new ModelMapper();

        Application application = applicationRepository.findById(applicationId)
                .orElseThrow(() -> new hrpipelinemanagerException("ApplicationService.APPLICATION_NOT_FOUND"));

        return modelMapper.map(application, ApplicationDTO.class);
    }

    /**
     * Update application status.
     *
     * @param applicationId the application ID
     * @param status new status
     */
    @Override
    public void updateApplicationStatus(Long applicationId, String status) throws hrpipelinemanagerException {
        Application application = applicationRepository.findById(applicationId)
                .orElseThrow(() -> new hrpipelinemanagerException("ApplicationService.APPLICATION_NOT_FOUND"));

        try {
            ApplicationStatus newStatus = ApplicationStatus.valueOf(status.toUpperCase());
            application.setStatus(newStatus);
            application.setLastUpdated(Timestamp.from(Instant.now()));
            applicationRepository.save(application);
        } catch (IllegalArgumentException e) {
            throw new hrpipelinemanagerException("ApplicationService.INVALID_STATUS");
        }
    }

    /**
     * Upload resume (filepath update).
     *
     * @param applicationId application ID
     * @param resumeUrl new resume path
     */
    @Override
    public void uploadResumeCover(Long applicationId, String resumeUrl, String coverLetterUrl) throws hrpipelinemanagerException {
        Application application = applicationRepository.findById(applicationId)
                .orElseThrow(() -> new hrpipelinemanagerException("ApplicationService.APPLICATION_NOT_FOUND"));

        application.setResumeUrl(resumeUrl);
        application.setCoverLetterUrl(coverLetterUrl);
        application.setLastUpdated(Timestamp.from(Instant.now()));
        applicationRepository.save(application);
    }
    
    

    @Override
    public void sendAcknowledgmentEmail(Long applicationId) throws hrpipelinemanagerException, UnsupportedEncodingException, MessagingException {
    	 Application application = applicationRepository.findById(applicationId)
    	            .orElseThrow(() -> new hrpipelinemanagerException("ApplicationService.APPLICATION_NOT_FOUND"));

    	    EmailTemplate template = emailTemplateService.getTemplateByType(EmailType.ACKNOWLEDGEMENT);

    	    String body = template.getBody()
    	        .replace("{candidateName}", application.getFirstName() + " " + application.getLastName())
    	        .replace("{jobTitle}", application.getJob().getTitle());

    	    String subject = template.getSubject()
    	        .replace("{candidateName}", application.getFirstName() + " " + application.getLastName())
    	        .replace("{jobTitle}", application.getJob().getTitle());

    	    emailUtil.sendEmail(application.getEmail(), subject, body);

    }

}
